void DFSHelper(int v,bool*visited)
	{
		visited[v] = true;
		cout << v << "  ";

		list<int>::iterator it;
		for (it = adj[v].begin(); it != adj[v].end(); ++it)
		{
			if (!visited[*it])
			{
				DFSHelper(*it, visited);
			}
		}

	}

	void DFS()
	{
		bool* visited = new bool[this->v];

		for (int i = 0; i < this->v; i++)
		{
			visited[i] = false;
		}

		for (int node = 0; node < this->v; node++)
		{
			if (!visited[node])
			{
				DFSHelper(node, visited);
			}
		}

	}











void BFS()
	{
		bool* visited = new bool[this->v];

		for (int i = 0; i < this->v; i++)
		{
			visited[i] = false;
		}
		list<int>queue;
		for (int node = 0; node < this->v; node++)
		{
			if (!visited[node])
			{
				visited[node] = true;
				queue.push_back(node);
				while (!queue.empty())
				{
					list<int>::iterator it;
					for (it = adj[node].begin(); it != adj[node].end(); ++it)
					{
						if (!visited[*it])
						{
							visited[*it] = true;
							queue.push_back(*it);
						}
			